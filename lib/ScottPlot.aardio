//ScottPlot波形图
import dotNet;
dotNet.reference({
    ["ScottPlot.WinForms"] = $"~\lib\ScottPlot\.res\ScottPlot.WinForms.dll";
    ["ScottPlot"] = $"~\lib\ScottPlot\.res\ScottPlot.dll";
    ["System.ValueTuple"] = $"~\lib\ScottPlot\.res\System.ValueTuple.dll";
})
 
ScottPlot = dotNet.import("ScottPlot");
var asm = dotNet.load("ScottPlot.WinForms");
ScottPlot.FormsPlot = asm.import("ScottPlot.FormsPlot");

/**intellisense()
ScottPlot.FormsPlot() = 创建图表\n!Chart.
ScottPlot.AxisLimits.NoLimits = AxisLimits representing uninitialized or "no data" limits (all limits are NaN)
ScottPlot.DataGen.Consecutive(.(System_Int32,System_Double,System_Double) = Generates an array of numbers with constant spacing.\npointCount : The number of points\n\nspacing : The space between points. Default 1.\n\noffset : The first point. Default 0\n\n renturn :An array of numbers with constant spacing.
ScottPlot.DataGen.Sin(.(System_Double[],System_Double) = Generates an array of sine values of an input array.\nxs : The arguments to the sine function.\n\nmult : A number to multiply the output by. Default 1.\n\n renturn :An array of sine values
ScottPlot.DataGen.Sin(.(System_Int32,System_Double,System_Double,System_Double,System_Double) = Generates an array of sine values.\npointCount : The number of values to generate.\n\noscillations : The number of periods. Default 1.\n\noffset : The number to increment the output by. Default 0.\n\nmult : The number to multiply the output by. Default 1.\n\nphase : The fraction of a period to offset by. Default 0.\n\n renturn :An array of sine values
ScottPlot.DataGen.SinSweep(.(System_Int32,System_Double) = Return data for a sine wave that increases frequency toward the end of an array.\n            This function may be useful for inspecting rendering artifacts when data is displayed at different densities.\npointCount : The number of values to generate.\n\ndensity : Increasing this value increases maximum frequency.\n\n renturn :An array of values
ScottPlot.DataGen.Cos(.(System_Double[],System_Double) = Generates an array of cosine values of an input array.\nxs : The arguments to the cosine function.\n\nmult : A number to multiply the output by. Default 1.\n\n renturn :An array of cosine values
ScottPlot.DataGen.Cos(.(System_Int32,System_Double,System_Double,System_Double,System_Double) = Generates an array of cosine values.\npointCount : The number of values to generate.\n\noscillations : The number of periods. Default 1.\n\noffset : The number to increment the output by. Default 0.\n\nmult : The number to multiply the output by. Default 1.\n\nphase : The fraction of a period to offset by. Default 0.\n\n renturn :An array of cosine values
ScottPlot.DataGen.Tan(.(System_Double[],System_Double) = Generates an array of tangent values of an input array.\nxs : The arguments to the tangent function.\n\nmult : A number to multiply the output by. Default 1.\n\n renturn :An array of tangent values
ScottPlot.DataGen.Random(.(System_Random,System_Int32,System_Double,System_Double) = Generates an array of random numbers following a uniform distribution on the interval [offset, multiplier].\nrand : The Random object to use.\n\npointCount : The number of random points to generate.\n\nmultiplier : The maximum number above offset that may be generated.\n\noffset : The minimum number that may be generated.\n\n renturn :An array of random numbers.
ScottPlot.DataGen.Random2D(.(System_Random,System_Int32,System_Int32,System_Double,System_Double) = Generates a 2D array of random numbers between 0 and 1 (uniform distribution)\nrand : The Random object to use.\n\nrows : number of rows (dimension 0)\n\ncolumns : number of columns (dimension 1)\n\nmultiplier : Multiply values by this number after generation\n\noffset : Add to values after multiplication\n\n renturn :2D array filled with random numbers
ScottPlot.DataGen.RandomInts(.(System_Random,System_Int32,System_Double,System_Double) = Generates an array of random numbers following a uniform distribution on the interval [offset, multiplier].\nrand : The Random object to use.\n\npointCount : The number of random points to generate.\n\nmultiplier : The maximum number above offset that may be generated.\n\noffset : The minimum number that may be generated.\n\n renturn :An array of random numbers.
ScottPlot.DataGen.RandomNormalValue(.(System_Random,System_Double,System_Double,System_Double) = Generates a single value from a normal distribution.\nrand : The Random object to use.\n\nmean : The mean of the distribution.\n\nstdDev : The standard deviation of the distribution.\n\nmaxSdMultiple : The maximum distance from the mean to generate, given as a multiple of the standard deviation.\n\n renturn :A single value from a normal distribution.
ScottPlot.DataGen.RandomNormal(.(System_Int32,System_Int32,System_Double,System_Double,System_Double) = Generates an array of values from a normal distribution.\nseed : The number to seed the random number generator with.\n\npointCount : The number of points to generate.\n\nmean : The mean of the distribution.\n\nstdDev : The standard deviation of the distribution.\n\nmaxSdMultiple : The maximum distance from the mean to generate, given as a multiple of the standard deviation.\n\n renturn :An array of values from a normal distribution.
ScottPlot.DataGen.RandomNormal(.(System_Random,System_Int32,System_Double,System_Double,System_Double) = Generates an array of values from a normal distribution.\nrand : The Random object to use.\n\npointCount : The number of points to generate.\n\nmean : The mean of the distribution.\n\nstdDev : The standard deviation of the distribution.\n\nmaxSdMultiple : The maximum distance from the mean to generate, given as a multiple of the standard deviation.\n\n renturn :An array of values from a normal distribution.
ScottPlot.DataGen.NoisyLinear(.(System_Random,System_Int32,System_Double,System_Double,System_Double) = Generates an array of data with normally distributed residuals about a line.\nrand : The Random object to use.\n\npointCount : The number of points to generate. Default 100.\n\nslope : The slope of the line. Default 1.\n\noffset : The y-intercept of the line. Default 0.\n\nnoise : The standard deviation of the residuals. Default 0.1\n\n renturn :An array of approximately linear data.
ScottPlot.DataGen.NoisySin(.(System_Random,System_Int32,System_Double,System_Double,System_Double) = Generates an array of data with uniformally distributed residuals about a sinusoidal curve.\nrand : The Random object to use.\n\npointCount : The number of points to generate.\n\noscillations : The number of periods. Default 1.\n\nnoiseLevel : Twice the maximum residual, in units of mult. Default 0.5\n\nmult : The number to multiply the residuals by. Default 1.\n\n renturn :An array of approximately sinusoidal data.
ScottPlot.DataGen.RandomColor(.(System_Random,System_Int32,System_Int32) = Generates a random color.\nrand : The Random object to use.\n\nmin : The min of each component. Default 0.\n\nmax : The max of each component. Default 255.\n\n renturn :A random color.
ScottPlot.DataGen.RandomWalk(.(System_Int32,System_Double,System_Double) = Return the cumulative sum of a random set of numbers using a fixed seed\npointCount : The number of points to generate.\n\nmult : The max difference between points in the walk. Default 1.\n\noffset : The first point in the walk. Default 0.\n\n renturn :The cumulative sum of a random set of numbers.
ScottPlot.DataGen.RandomWalk(.(System_Random,System_Int32,System_Double,System_Double) = Return the cumulative sum of a random set of numbers.\nrand : The random object to use.\n\npointCount : The number of points to generate.\n\nmult : The max difference between points in the walk. Default 1.\n\noffset : The first point in the walk. Default 0.\n\n renturn :The cumulative sum of a random set of numbers.
ScottPlot.DataGen.RandomWalk2D(.(System_Random,System_Int32) = Generate unevenly-spaced X/Y points.\n            X values walk upward (by values from 0 to 1)\n            Y values walk randomly (by values from -1 to 1)
ScottPlot.DataGen.RandomStockPrices(.(System_Random,System_Int32,System_TimeSpan,System_Double,System_Double) = Return OHLC array with random prices X positions as DateTime.ToOATime() values using the given time delta\nrand : The random object to use.\n\npointCount : The number of prices to generate.\n\ndelta : The difference in time between prices.\n\nmult : The max difference between base prices around which that day's prices independently vary. Default 10.\n\nstartingPrice : The initial base price. Default 123.45\n\n renturn :OHLC array with random prices
ScottPlot.DataGen.RandomStockPrices(.(System_Random,System_Int32,System_Double,System_Double) = Return OHLC array with random prices X positions as sequential numbers (0, 1, 2, etc.)\nrand : The random object to use.\n\npointCount : The number of prices to generate.\n\nmult : The max difference between base prices around which that day's prices independently vary. Default 10.\n\nstartingPrice : The initial base price. Default 123.45\n\n renturn :OHLC array with random prices
ScottPlot.DataGen.RandomStockPrices(.(System_Random,System_Int32,System_Double,System_Double,System_Int32,System_Int32,System_Boolean) = Return OHLC array with random prices X positions as sequential numbers (0, 1, 2, etc.)\nrand : The random object to use.\n\npointCount : The number of prices to generate.\n\nmult : The max difference between base prices around which that day's prices independently vary. Default 10.\n\nstartingPrice : The initial base price. Default 123.45\n\ndeltaMinutes : The minutes between prices. Cumulative with deltaDays. Default 0.\n\ndeltaDays : The days between prices. Cumulative with deltaMinutes. Default 1.\n\nsequential : Whether to use TimeSpan or integer x axis.\n\n renturn :OHLC array with random prices
ScottPlot.DataGen.RandomSpan(.(System_Random,System_Double,System_Double,System_Double) = Generates a random span.\nrand : The random object to use.\n\nlow : The minimum of the span. Default 0.\n\nhigh : Tge naximum of the span. Default 100.\n\nminimumSpacing : The minimum length of the span. Default 10.\n\n renturn :A random span.
ScottPlot.DataGen.Range(.(System_Int32) = Generates a range of values starting at 0 and separated by 1.\nstop : The end of the range.\n\n renturn :A range of values.
ScottPlot.DataGen.Range(.(System_Int32,System_Int32) = Generates a range of values separated by 1.\nstart : The start of the range.\n\nstop : The end of the range.\n\n renturn :A range of values.
ScottPlot.DataGen.Range(.(System_Double,System_Double,System_Double,System_Boolean) = Generates a range of values.\nstart : The start of the range.\n\nstop : The end of the range.\n\nstep : The space between values.\n\nincludeStop : Indicates whether to include the stop point in the range. Default false.\n\n renturn :A range of values.
ScottPlot.DataGen.Zeros(.(System_Int32) = Generates an array of zeros\npointCount : The number of zeroes to generate\n\n renturn :An array of zeros
ScottPlot.DataGen.Ones(.(System_Int32) = Generates an array of ones\npointCount : The number of ones to generate\n\n renturn :An array of ones
ScottPlot.DataGen.BitmapFrom2dArray(.(System_Double[],ScottPlot_Drawing_Colormap) = Generates a Bitmap from data on the range [0, 255]\ndata : The data to use.\n\ncmap : The colormap to use.\n\n renturn :A Bitmap
ScottPlot.DataGen.SampleImage() = Generates a sample Bitmap.\n renturn :A sample Bitmap
ScottPlot.DataGen.SampleImageData() = Returns a sample 2D array of grayscale values.\n renturn :2D array of grayscale values.
ScottPlot.DataGen.ActionPotential() = Recording of a neuronal action potential (100 ms, 20 kHz sample rate, mV units)\n renturn :Recording of a neuronal action potential
end intellisense**/

/**intellisense(!Chart.)
Plot = 引用图形\n!ChartPlot.
AxesChanged = @.AxesChanged = function(){
	/***This event is invoked any time the axis limits are modified.***/
	__
}
RightClicked = @.RightClicked = function(){
	/***This event is invoked any time the plot is right-clicked.
            By default it contains DefaultRightClickEvent(), but you can remove this and add your own method.***/
	__
}
PlottableDragged = @.PlottableDragged = function(){
	/***This event is invoked after the mouse moves while dragging a draggable plottable.
            The object passed is the plottable being dragged.***/
	__
}
PlottableDropped = @.PlottableDropped = function(){
	/***This event is invoked right after a draggable plottable was dropped.
            The object passed is the plottable that was just dropped.***/
	__
}
GetMouseCoordinates(.(System_Int32,System_Int32) = Return the mouse position on the plot (in coordinate space) for the latest X and Y coordinates
GetMouseCoordinatesEx(.(System_Int32,System_Int32) = Return the mouse position on the plot (in coordinate space) for the latest X and Y coordinates
GetMousePixel() = Return the mouse position (in pixel space) for the last observed mouse position
Reset() = Reset this control by replacing the current plot with a new empty plot
Reset(.(ScottPlot_Plot) = Reset this control by replacing the current plot with an existing plot
Refresh(.(System_Boolean,System_Boolean) = Re-render the plot and update the image displayed by this control.\nlowQuality : disable anti-aliasing to produce faster (but lower quality) plots\n\nskipIfCurrentlyRendering : \n
Render(.(System_Boolean,System_Boolean) = Re-render the plot and update the image displayed by this control.\nlowQuality : disable anti-aliasing to produce faster (but lower quality) plots\n\nskipIfCurrentlyRendering : \n
RefreshRequest(.(ScottPlot_RenderType) = Request the control to refresh the next time it is available.\n            This method does not block the calling thread.
RenderRequest(.(ScottPlot_RenderType) = Request the control to refresh the next time it is available.\n            This method does not block the calling thread.
Dispose(.(System_Boolean) = Clean up any resources being used.\ndisposing : true if managed resources should be disposed; otherwise, false.\n

end intellisense**/

/**intellisense(!ChartPlot.)
AddAnnotation(.(System_String,System_Double,System_Double) = Display text in the data area at a pixel location (not a X/Y coordinates)
AddArrow(.(System_Double,System_Double,System_Double,System_Double,System_Single,System_Drawing_Color) = Display an arrow pointing to a spot in coordinate space
AddClevelandDot(.(System_Double[],System_Double[]) = Add a Cleveland Dot plot for the given values. Cleveland Dots will be placed at X positions 0, 1, 2, etc.
AddClevelandDot(.(System_Double[],System_Double[],System_Double[]) = Add a Cleveland Dot plot for the given values using defined dot positions.
AddLollipop(.(System_Double[],System_Drawing_Color) = Add a Lollipop plot for the given values. Lollipops will be placed at X positions 0, 1, 2, etc.
AddLollipop(.(System_Double[],System_Double[],System_Drawing_Color) = Add a lollipop plot for the given values using defined lollipop positions
AddBar(.(System_Double[],System_Drawing_Color) = Add a bar plot for the given values. Bars will be placed at X positions 0, 1, 2, etc.
AddBar(.(System_Double[],System_Double[],System_Drawing_Color) = Add a bar plot for the given values using defined bar positions
AddBar(.(System_Double[],System_Double[],System_Double[],System_Drawing_Color) = Add a bar plot (values +/- errors) using defined positions
AddBarGroups(.(System_String[],System_String[],System_Double[][],System_Double[][]) = Create a series of bar plots and customize the ticks and legend
AddBubblePlot() = Add an empty bubble plot. Call it's Add() method to add bubbles with custom position and styling.
AddBubblePlot(.(System_Double[],System_Double[],System_Double,System_Drawing_Color,System_Double,System_Drawing_Color) = Add a bubble plot with multiple bubbles at the given positions all styled the same.\n            Call the Add() method to add bubbles manually, allowing further customization of size and style.
AddCandlesticks(.(ScottPlot_OHLC[]) = Add candlesticks to the chart from OHLC (open, high, low, close) data
AddColorbar(.(ScottPlot_Drawing_Colormap,System_Int32,System_Boolean) = Add a colorbar to display a colormap beside the data area\ncolormap : Colormap to display in this colorbar\n\nspace : The size of the right axis will be set to this number of pixels to make room for the colorbar\n\nrightSide : If false the colorbar will be displayed on the left edge of the plot.\n\n renturn :the colorbar that was just created
AddColorbar(.(ScottPlot_Plottable_IHasColormap,System_Int32) = Add a colorbar initialized with settings from a heatmap\nheatmap : A heatmap-containing plottable to connect with this colorbar\n\nspace : The size of the right axis will be set to this number of pixels to make room for the colorbar\n\n renturn :the colorbar that was just created
AddCrosshair(.(System_Double,System_Double) = Add a crosshair to the plot\nx : position of vertical line (axis units)\n\ny : position of horizontal line (axis units)\n\n renturn :the crosshair that was just created
AddFill(.(System_Double[],System_Double[],System_Double,System_Drawing_Color) = Create a polygon to fill the area between Y values and a baseline.
AddFill(.(System_Double[],System_Double[],System_Double[],System_Drawing_Color) = Create a polygon to fill the area between two Y curves that share the same X positions.
AddFill(.(System_Double[],System_Double[],System_Double[],System_Double[],System_Drawing_Color) = Create a polygon to fill the area between Y values of two curves.
AddFillAboveAndBelow(.(System_Double[],System_Double[],System_Double,System_Drawing_Color,System_Drawing_Color) = Create a polygon to fill the area between Y values and a baseline\n            that uses two different colors for area above and area below the baseline.
AddFunction(.(System_Func{System_Double,System_Double},System_Drawing_Color,System_Double,ScottPlot_LineStyle) = Add a line plot that uses a function (rather than X/Y points) to place the curve
AddHeatmap(.(System_Double[],ScottPlot_Drawing_Colormap,System_Boolean) = Add a heatmap to the plot automatically-sized so each cell is 1x1.\nintensities : 2D array of intensities.             WARNING: Rendering artifacts may appear for arrays larger than Bitmap can support (~10M total values).\n\ncolormap : \n\nlockScales : If true, AxisScaleLock() will be called to ensure heatmap cells will be square.\n\n renturn :            Returns the heatmap that was added to the plot.            Act on its public fields and methods to customize it or update its data.            
AddHeatmap(.(System_Double[],ScottPlot_Drawing_Colormap,System_Boolean) = Add a heatmap to the plot automatically-sized so each cell is 1x1.\nintensities : 2D array of intensities.             WARNING: Rendering artifacts may appear for arrays larger than Bitmap can support (~10M total values).\n\ncolormap : \n\nlockScales : If true, AxisScaleLock() will be called to ensure heatmap cells will be square.\n\n renturn :            Returns the heatmap that was added to the plot.            Act on its public fields and methods to customize it or update its data.            
AddHeatmapCoordinated(.(System_Double[],System_Double,System_Double,System_Double,System_Double,ScottPlot_Drawing_Colormap) = Add heatmap to the plot stretched to fit the given dimensions.\n            Unlike the regular heatmap which gives each cell a size of 1x1 and starts at the axis origin, \n            this heatmap stretches the array so that it covers the defined X and Y spans.\nintensities : 2D array of intensities.             WARNING: Rendering artifacts may appear for arrays larger than Bitmap can support (~10M total values).\n\nxMin : position of the left edge of the far left column\n\nxMax : position of the left edge of the far right column\n\nyMin : position of the upper edge of the bottom row\n\nyMax : position of the upper edge of the top row\n\ncolormap : \n\n renturn :            Returns the heatmap that was added to the plot.            Act on its public fields and methods to customize it or update its data.            
AddHeatmapCoordinated(.(System_Double[],System_Double,System_Double,System_Double,System_Double,ScottPlot_Drawing_Colormap) = Add heatmap to the plot stretched to fit the given dimensions.\n            Unlike the regular heatmap which gives each cell a size of 1x1 and starts at the axis origin, \n            this heatmap stretches the array so that it covers the defined X and Y spans.\nintensities : 2D array of intensities.             WARNING: Rendering artifacts may appear for arrays larger than Bitmap can support (~10M total values).\n\nxMin : position of the left edge of the far left column\n\nxMax : position of the left edge of the far right column\n\nyMin : position of the upper edge of the bottom row\n\nyMax : position of the upper edge of the top row\n\ncolormap : \n\n renturn :            Returns the heatmap that was added to the plot.            Act on its public fields and methods to customize it or update its data.            
AddHorizontalLine(.(System_Double,System_Drawing_Color,System_Single,ScottPlot_LineStyle,System_String) = Add a horizontal axis line at a specific Y position
AddHorizontalSpan(.(System_Double,System_Double,System_Drawing_Color,System_String) = Add a horizontal span (shades the region between two X positions)
AddImage(.(System_Drawing_Bitmap,System_Double,System_Double) = Display an image at a specific coordinate
AddLine(.(System_Double,System_Double,System_Double,System_Double,System_Drawing_Color,System_Single) = Add a line (a scatter plot with two points) to the plot
AddLine(.(System_Double,System_Double,System_ValueTuple{System_Double,System_Double},System_Drawing_Color,System_Single) = Add a line (a scatter plot with two points) to the plot
AddMarker(.(System_Double,System_Double,ScottPlot_MarkerShape,System_Double,System_Drawing_Color,System_String) = Add a marker at a specific X/Y position.
AddOHLCs(.(ScottPlot_OHLC[]) = Add OHLC (open, high, low, close) data to the plot
AddPie(.(System_Double[],System_Boolean) = Add a pie chart to the plot
AddPoint(.(System_Double,System_Double,System_Drawing_Color,System_Single,ScottPlot_MarkerShape,System_String) = Add a point (a scatter plot with a single marker)\nx : \n\ny : \n\ncolor : color of the marker\n\nsize : size of the marker\n\nshape : maker shape\n\nlabel : text to appear in the legend\n\n renturn :            The scatter plot that was created and added to the plot.             Interact with its public fields and methods to customize style and update data.            
AddPolygon(.(System_Double[],System_Double[],System_Drawing_Color,System_Double,System_Drawing_Color) = Add a polygon to the plot
AddPolygons(.(System_Collections_Generic_List{System_Collections_Generic_List{System_ValueTuple{System_Double,System_Double}}},System_Drawing_Color,System_Double,System_Drawing_Color) = Add many polygons using an optimized rendering method
AddPopulation(.(ScottPlot_Statistics_Population,System_String) = Add a population to the plot
AddPopulations(.(ScottPlot_Statistics_Population[],System_String) = Add multiple populations to the plot as a single series
AddPopulations(.(ScottPlot_Statistics_PopulationMultiSeries) = Add multiple populations to the plot as a single series
AddRadar(.(System_Double[],System_Boolean,System_Double[],System_Boolean) = Add a radar plot (a two-dimensional chart of three or more quantitative variables represented on axes starting from the same point)\nvalues : 2D array containing categories (columns) and groups (rows)\n\nindependentAxes : if true, axis (category) values are scaled independently\n\nmaxValues : if provided, each category (column) is normalized to these values\n\ndisableFrameAndGrid : also make the plot frameless and disable its grid\n\n renturn :the radar plot that was just created and added to the plot
AddRadialGauge(.(System_Double[],System_Boolean) = Add a radial gauge plot (a chart where data is represented by concentric circular gauges)\nvalues : Array of gauge values\n\ndisableFrameAndGrid : Also make the plot frameless and disable its grid\n\n renturn :The radial gaugle plot that was just created and added to the plot
AddCoxcomb(.(System_Double[],System_Boolean) = A Pie chart where the angle of slices is constant but the radii are not.\nvalues : The data to plot\n\nhideGridAndFrame : Whether to make the plot frameless and disable the grid\n
AddErrorBars(.(System_Double[],System_Double[],System_Double[],System_Double[],System_Double[],System_Double[],System_Drawing_Color,System_Single) = Add error bars to the plot with custom dimensions in all 4 directions.\nxs : Horizontal center of the errorbar\n\nys : Vertical center of each errorbar\n\nxErrorsPositive : Magnitude of positive vertical error\n\nxErrorsNegative : Magnitude of positive horizontal error\n\nyErrorsPositive : Magnitude of negative vertical error\n\nyErrorsNegative : Magnitude of negative horizontal error\n\ncolor : Color (null for next color in palette)\n\nmarkerSize : Size (in pixels) to draw a marker at the center of each errorbar\n
AddErrorBars(.(System_Double[],System_Double[],System_Double[],System_Double[],System_Drawing_Color,System_Single) = Add error bars to the plot which have symmetrical positive/negative errors\nxs : Horizontal center of the errorbar\n\nys : Vertical center of each errorbar\n\nxErrors : Magnitude of vertical error\n\nyErrors : Magnitude of horizontal error\n\ncolor : Color (null for next color in palette)\n\nmarkerSize : Size (in pixels) to draw a marker at the center of each errorbar\n
AddScaleBar(.(System_Double,System_Double,System_String,System_String) = Add an L-shaped scalebar to the corner of the plot
AddScatter(.(System_Double[],System_Double[],System_Drawing_Color,System_Single,System_Single,ScottPlot_MarkerShape,ScottPlot_LineStyle,System_String) = Add a scatter plot from X/Y pairs. \n            Lines and markers are shown by default.\n            Scatter plots are slower than Signal plots.
AddScatterLines(.(System_Double[],System_Double[],System_Drawing_Color,System_Single,ScottPlot_LineStyle,System_String) = Add a scatter plot from X/Y pairs connected by lines (no markers).\n            Scatter plots are slower than Signal plots.
AddScatterPoints(.(System_Double[],System_Double[],System_Drawing_Color,System_Single,ScottPlot_MarkerShape,System_String) = Add a scatter plot from X/Y pairs using markers at points (no lines).\n            Scatter plots are slower than Signal plots.
AddScatterStep(.(System_Double[],System_Double[],System_Drawing_Color,System_Single,System_String) = Add a step plot is a type of line plot where points are connected with right angles instead of straight lines.
AddScatterList(.(System_Drawing_Color,System_Single,System_Single,System_String,ScottPlot_MarkerShape,ScottPlot_LineStyle) = Scatter plot with Add() and Clear() methods for updating data
AddSignal(.(System_Double[],System_Double,System_Drawing_Color,System_String) = Signal plots have evenly-spaced X points and render very fast.
AddSignalXY(.(System_Double[],System_Double[],System_Drawing_Color,System_String) = Speed-optimized plot for Ys with unevenly-spaced ascending Xs
AddText(.(System_String,System_Double,System_Double,System_Single,System_Drawing_Color) = Display text at specific X/Y coordinates
AddText(.(System_String,System_Double,System_Double,ScottPlot_Drawing_Font) = Display text at specific X/Y coordinates
AddTooltip(.(System_String,System_Double,System_Double) = Display a text bubble that points to an X/Y location on the plot
AddVectorField(.(ScottPlot_Statistics_Vector2[],System_Double[],System_Double[],System_String,System_Drawing_Color,ScottPlot_Drawing_Colormap,System_Double) = Add a 2D vector field to the plot
AddVerticalLine(.(System_Double,System_Drawing_Color,System_Single,ScottPlot_LineStyle,System_String) = Add a vertical axis line at a specific Y position
AddVerticalSpan(.(System_Double,System_Double,System_Drawing_Color,System_String) = Add a horizontal span (shades the region between two X positions)
XAxis = Axis on the bottom edge of the plot
XAxis2 = Axis on the top edge of the plot
YAxis = Axis on the left edge of the plot
YAxis2 = Axis on the right edge of the plot
XLabel(.(System_String) = Set the label for the vertical axis to the right of the plot (XAxis)\nlabel : new text\n
YLabel(.(System_String) = Set the label for the vertical axis to the right of the plot (YAxis2)\nlabel : new text\n
Title(.(System_String,System_Boolean,System_Drawing_Color,System_Single,System_String) = Set the label for the horizontal axis above the plot (XAxis2)
Frame(.(System_Boolean,System_Drawing_Color,System_Boolean,System_Boolean,System_Boolean,System_Boolean) = Configure color and visibility of the frame that outlines the data area.\n            Note that the axis lines of all 4 primary axes touch each other, \n            giving the appearance of a rectangle framing the data area.\n            This method allows the user to customize these lines as a group or individually.\nvisible : visibility of the frames for the 4 primary axes\n\ncolor : color for the 4 primary axis lines\n\nleft : visibility of the left axis (YAxis) line\n\nright : visibility of the right axis (YAxis2) line\n\nbottom : visibility of the bottom axis (XAxis) line\n\ntop : visibility of the top axis (XAxis2) line\n
Frameless(.(System_Boolean) = Give the plot a frameless appearance by hiding all axes.\n            Axes are hidden by making them invisible and setting their size to zero.\n            This causes the data area to go right up to the edge of the plot.
Frame(.(System_Boolean) = Control visibility of axes.
Grid(.(System_Boolean,System_Drawing_Color,ScottPlot_LineStyle) = Customize basic options for the primary X and Y axes. \n            Call XAxis.Grid() and YAxis.Grid() to further customize grid settings.\nenable : sets visibility of X and Y grid lines\n\ncolor : sets color of of X and Y grid lines\n\nlineStyle : defines the style for X and Y grid lines\n
Layout(.(System_Single,System_Single,System_Single,System_Single,System_Single) = Set padding around the data area by defining the minimum size and padding for all axes\nleft : YAxis size (in pixels) that defines the area to the left of the plot\n\nright : YAxis2 size (in pixels) that defines the area to the right of the plot\n\nbottom : XAxis size (in pixels) that defines the area to the bottom of the plot\n\ntop : XAxis2 size (in pixels) that defines the area to the top of the plot\n\npadding : Customize the default padding between axes and the edge of the plot\n
MatchLayout(.(ScottPlot_Plot,System_Boolean,System_Boolean) = Adjust this axis layout based on the layout of a source plot\nsourcePlot : plot to use for layout reference\n\nhorizontal : if true, horizontal layout will be matched\n\nvertical : if true, vertical layout will be matched\n
MatchAxis(.(ScottPlot_Plot,System_Boolean,System_Boolean) = Get the axis limits for the given plot and apply them to this plot
XTicks(.(System_String[]) = Manually define X axis tick labels using consecutive integer positions (0, 1, 2, etc.)\nlabels : new tick labels for the X axis\n
XTicks(.(System_Double[],System_String[]) = Manually define X axis tick positions and labels\npositions : positions on the X axis\n\nlabels : new tick labels for the X axis\n
YTicks(.(System_String[]) = Manually define Y axis tick labels using consecutive integer positions (0, 1, 2, etc.)\nlabels : new tick labels for the Y axis\n
YTicks(.(System_Double[],System_String[]) = Manually define Y axis tick positions and labels\npositions : positions on the Y axis\n\nlabels : new tick labels for the Y axis\n
SetCulture(.(System_Globalization_CultureInfo) = Set the culture to use for number-to-string converstion for tick labels of all axes.\nculture : standard culture\n
SetCulture(.(System_String,System_String,System_String,System_Int32,System_Int32,System_Int32[]) = Set the culture to use for number-to-string converstion for tick labels of all axes.\n            This overload allows you to manually define every format string, \n            allowing extensive customization of number and date formatting.\nshortDatePattern : \n\ndecimalSeparator : Separates the decimal digits\n\nnumberGroupSeparator : Separates large numbers ito groups of digits for readability\n\ndecimalDigits : Number of digits after the numberDecimalSeparator\n\nnumberNegativePattern : Appearance of negative numbers\n\nnumberGroupSizes : Sizes of decimal groups which are separated by the numberGroupSeparator\n
AddAxis(.(ScottPlot_Renderable_Edge,System_Int32,System_String,System_Drawing_Color) = Create and return an additional axis\nedge : Edge of the plot the new axis will belong to\n\naxisIndex : Only plottables with the same axis index will use this axis\n\ntitle : defualt label to use for the axis\n\ncolor : defualt color to use for the axis\n\n renturn :The axis that was just created and added to the plot. You can further customize it by interacting with it.
RemoveAxis(.(ScottPlot_Renderable_Axis) = Remove the a specific axis from the plot
GetCoordinate(.(System_Single,System_Single,System_Int32,System_Int32) = Return the coordinate (in coordinate space) for the given pixel\nxPixel : horizontal pixel location\n\nyPixel : vertical pixel location\n\nxAxisIndex : index of the horizontal axis to use\n\nyAxisIndex : index of the vertical axis to use\n\n renturn :point in coordinate space
GetCoordinateX(.(System_Single,System_Int32) = Return the X position (in coordinate space) for the given pixel column\nxPixel : horizontal pixel location\n\nxAxisIndex : index of the horizontal axis to use\n\n renturn :horizontal position in coordinate space
GetCoordinateY(.(System_Single,System_Int32) = Return the Y position (in coordinate space) for the given pixel row\nyPixel : vertical pixel location\n\nyAxisIndex : index of the vertical axis to use\n\n renturn :vertical position in coordinate space
GetPixel(.(System_Double,System_Double,System_Int32,System_Int32) = Return the pixel for the given point in coordinate space\nx : horizontal coordinate\n\ny : vertical coordinate\n\nxAxisIndex : index of the horizontal axis to use\n\nyAxisIndex : index of the vertical axis to use\n\n renturn :pixel location
GetPixelX(.(System_Double,System_Int32) = Return the horizontal pixel location given position in coordinate space\nx : horizontal coordinate\n\nxAxisIndex : index of the horizontal axis to use\n\n renturn :horizontal pixel position
GetPixelY(.(System_Double,System_Int32) = Return the vertical pixel location given position in coordinate space\ny : vertical coordinate\n\nyAxisIndex : index of the vertical axis to use\n\n renturn :vertical pixel position
GetDataLimits(.(System_Int32,System_Int32) = Return the limits of the data contained by this plot (regardless of the axis limits).\n            WARNING: This method iterates all data points in the plot and may be slow for large datasets.
GetAxisLimits(.(System_Int32,System_Int32) = Returns the current limits for a given pair of axes.\nxAxisIndex : which axis index to reference\n\nyAxisIndex : which axis index to reference\n\n renturn :current limits
SetAxisLimits(.(System_Double,System_Double,System_Double,System_Double,System_Int32,System_Int32) = Set limits for the a given pair of axes\nxMin : lower limit of the horizontal axis\n\nxMax : upper limit of the horizontal axis\n\nyMin : lower limit of the vertical axis\n\nyMax : upper limit of the vertical axis\n\nxAxisIndex : index of the axis the horizontal limits apply to\n\nyAxisIndex : index of the axis the vertical limits apply to\n
SetAxisLimitsX(.(System_Double,System_Double) = Set limits for the primary X axis\nxMin : lower limit of the horizontal axis\n\nxMax : upper limit of the horizontal axis\n
SetAxisLimitsY(.(System_Double,System_Double) = Set limits for the primary Y axis\nyMin : lower limit of the vertical axis\n\nyMax : upper limit of the vertical axis\n
SetAxisLimits(.(ScottPlot_AxisLimits,System_Int32,System_Int32) = Set limits for a pair of axes\nlimits : new limits\n\nxAxisIndex : index of the axis the horizontal limits apply to\n\nyAxisIndex : index of the axis the vertical limits apply to\n
SetViewLimits(.(System_Double,System_Double,System_Double,System_Double) = Set maximum outer limits beyond which the plot cannot be zoomed-out or panned.
SetOuterViewLimits(.(System_Double,System_Double,System_Double,System_Double,System_Int32,System_Int32) = Set maximum outer limits beyond which the plot cannot be zoomed-out or panned.
SetInnerViewLimits(.(System_Double,System_Double,System_Double,System_Double,System_Int32,System_Int32) = Set minimum innter limits which will always be visible on the plot.
Margins(.(System_Double,System_Double) = Auto-scale the axis limits to fit the data. This function is an alias for AxisAuto().\nx : horizontal margin in the range [0, 1]\n\ny : vertical margin in the range [0, 1]\n\n renturn :Current default margins for automatic axis scaling
Margins(.(System_Double,System_Double,System_Int32,System_Int32) = Auto-scale the axis limits to fit the data. This function is an alias for AxisAuto().\n            This overload is for multi-axis plots (plots with multiple X and Y axes) and will only adjust the specified axes.\nx : horizontal margin in the range [0, 1]\n\ny : vertical margin in the range [0, 1]\n\nxAxisIndex : Only adjust the specified axis (for plots with multiple X axes)\n\nyAxisIndex : Only adjust the specified axis (for plots with multiple Y axes)\n\n renturn :Current default margins for automatic axis scaling
AxisAuto(.(System_Double,System_Double) = Automatically set axis limits to fit the data.\nhorizontalMargin : Extra space (fraction) to add to the left and right of the limits of the data (typically 0.05)\n\nverticalMargin : Extra space (fraction) to add above and below the limits of the data (typically 0.1)\n
AxisAuto(.(System_Double,System_Double,System_Int32,System_Int32) = Automatically set axis limits to fit the data.\n            This overload is designed for multi-axis plots (with multiple X axes or multiple Y axes).\nhorizontalMargin : Extra space (fraction) to add to the left and right of the limits of the data (typically 0.05)\n\nverticalMargin : Extra space (fraction) to add above and below the limits of the data (typically 0.1)\n\nxAxisIndex : Only adjust the specified axis (for plots with multiple X axes)\n\nyAxisIndex : Only adjust the specified axis (for plots with multiple Y axes)\n
AxisAutoX(.(System_Double,System_Int32) = Automatically adjust axis limits to fit the data\nmargin : amount of space to the left and right of the data (typically 0.05)\n\nxAxisIndex : Only adjust the specified axis (for plots with multiple X axes)\n
AxisAutoY(.(System_Double,System_Int32) = Automatically adjust axis limits to fit the data (with a little extra margin)\nmargin : amount of space above and below the data (as a fraction of its height)\n\nyAxisIndex : Only adjust the specified axis (for plots with multiple Y axes)\n
AxisScale(.(System_Double,System_Double) = Adjust axis limits to achieve a certain pixel scale (units per pixel)\nunitsPerPixelX : zoom so 1 pixel equals this many horizontal units in coordinate space\n\nunitsPerPixelY : zoom so 1 pixel equals this many vertical units in coordinate space\n
AxisScaleLock(.(System_Boolean,ScottPlot_EqualScaleMode) = Lock X and Y axis scales (units per pixel) together to protect symmetry of circles and squares\nenable : if true, scales are locked such that zooming one zooms the other\n\nscaleMode : defines behavior for how to adjust axis limits to achieve equal scales\n
AxisZoom(.(System_Double,System_Double,System_Double,System_Double,System_Int32,System_Int32) = Zoom in or out. The amount of zoom is defined as a fraction of the current axis span.\nxFrac : horizontal zoom (>1 means zoom in)\n\nyFrac : vertical zoom (>1 means zoom in)\n\nzoomToX : if defined, zoom will be centered at this point\n\nzoomToY : if defined, zoom will be centered at this point\n\nxAxisIndex : index of the axis to zoom\n\nyAxisIndex : index of the axis to zoom\n
AxisPan(.(System_Double,System_Double) = Pan the primary X and Y axis without affecting zoom\ndx : horizontal distance to pan (in coordinate units)\n\ndy : vertical distance to pan (in coordinate units)\n
settings = The settings object stores all state (configuration and data) for a plot
Width = Plot image width (pixels)
Height = Plot image height (pixels)
!Plot(.(System_Int32,System_Int32) = A ScottPlot stores data in plottable objects and draws it on a bitmap when Render() is called\nwidth : default width (pixels) to use when rendering\n\nheight : default height (pixels) to use when rendering\n
ToString() = Brief description of this plot\n renturn :plot description
Version = ScottPlot version in the format "1.2.3" (or "1.2.3-beta" for pre-releases)
Add(.(ScottPlot_Plottable_IPlottable) = Add a plottable to the plot\nplottable : a plottable the user created\n
Clear() = Clear all plottables
Clear(.(System_Type) = Remove all plottables of the given type\nplottableType : all plottables of this type will be removed\n
Remove(.(ScottPlot_Plottable_IPlottable) = Remove a specific plottable\nplottable : The plottable to remove\n
RemoveAt(.(System_Int32) = Remove the plottable at the specified index of the list\nindex : The zero-based index of the element to remove\n
Move(.(System_Int32,System_Int32) = Move a plottable in the list. Plottables near the end are rendered last (on top).
MoveFirst(.(ScottPlot_Plottable_IPlottable) = Move a plottable to the front so it is rendered first and appears beneath all others.
MoveLast(.(ScottPlot_Plottable_IPlottable) = Move a plottable to the end so it is rendered last and appears above all others.
GetPlottables() = Return a copy of the list of plottables\n renturn :list of plottables
GetDraggable(.(System_Double,System_Double,System_Int32) = Return the draggable plottable under the mouse cursor (or null if there isn't one)
Validate(.(System_Boolean) = Throw an exception if any plottable contains an invalid state.\ndeep : Check every individual value for validity. This is more thorough, but slower.\n
GetSettings(.(System_Boolean) = The Settings module stores manages plot state and advanced configuration.\n            Its class structure changes frequently, and users are highly advised not to interact with it directly.\n            This method returns the settings module for advanced users and developers to interact with.\nshowWarning : Show a warning message indicating this method is only intended for developers\n\n renturn :Settings used by the plot
Resize(.(System_Single,System_Single) = Update the default size for new renders\nwidth : width (pixels) for future renders\n\nheight : height (pixels) for future renders\n
GetNextColor(.(System_Double) = Return a new color from the Pallette based on the number of plottables already in the plot.\n            Use this to ensure every plottable gets a unique color.\nalpha : value from 0 (transparent) to 1 (opaque)\n\n renturn :new color
Palette = The palette defines default colors to use for new plottables.
Style(.(ScottPlot_Styles_IStyle) = Set the colors and fonts of many plot components at once using a predefined theme
Style(.(System_Drawing_Color,System_Drawing_Color,System_Drawing_Color,System_Drawing_Color,System_Drawing_Color,System_Drawing_Color) = Set the color of specific plot components\nfigureBackground : Color for area beneath the axis ticks and labels and around the data area\n\ndataBackground : Color for area inside the data frame but beneath the grid and plottables\n\ngrid : Color for grid lines\n\ntick : Color for axis tick marks and frame lines\n\naxisLabel : Color for axis labels and tick labels\n\ntitleLabel : Color for the top axis label (XAxis2's title)\n
Benchmark(.(System_Boolean) = If enabled, the benchmark displays render information in the corner of the plot.\nenable : True/false defines whether benchmark is enabled. Null will not change the benchmark.\n\n renturn :true if the benchmark is enabled
BenchmarkTimes() = Return an array of times for the last several renders.\n            The last element of the array is the most recently rendered frame time.
Legend(.(System_Boolean,ScottPlot_Alignment) = Configure legend visibility and location. \n            Optionally you can further customize the legend by interacting with the object it returns.\nenable : whether or not the legend is visible (or null for no change)\n\nlocation : position of the legend relative to the data area\n\n renturn :The legend itself. Use public fields to further customize its appearance and behavior.
Copy() = Return a new Plot with all the same Plottables (and some of the styles) of this one.\n renturn :A new plot similar to this one.
Guid = The GUID helps identify individual plots
GetGuid() = Every plot has a globally unique ID (GUID) that can help differentiate it from other plots\n renturn :A string representing the GUID
Equals(.(System_Object) = Returns true if the given plot is the exact same plot as this one\nobj : the plot to compare this one to\n\n renturn :true if the two plots have the same GUID
GetHashCode() = Returns an integer unique to this instance (based on the GUID)\n renturn :An integer representing the GUID
PlotBarGroups(.(System_String[],System_String[],System_Double[][],System_Double[][],System_Double,System_Double,System_Double,System_Boolean) = Create a series of bar plots given a 2D dataset
Render(.(System_Drawing_Bitmap,System_Boolean,System_Double) = Render the plot onto an existing bitmap\nbmp : an existing bitmap to render onto\n\nlowQuality : \n\nscale : scale the size of the output image by this fraction (without resizing the plot)\n\n renturn :the same bitmap that was passed in (but was rendered onto)
RenderLock() = Wait for the current render to finish, then prevent future renders until RenderUnlock() is called.\n            Locking rendering is required if you intend to modify plottables while rendering is occurring in another thread.
RenderUnlock() = Release the render lock, allowing renders to proceed.
Render(.(System_Boolean) = Render the plot onto a new Bitmap (using the size given when the plot was created or resized)\nlowQuality : if true, anti-aliasing will be disabled for this render\n\n renturn :the Bitmap that was created
Render(.(System_Int32,System_Int32,System_Boolean,System_Double) = Render the plot onto a new Bitmap of the given dimensions\nwidth : resize the plot to this width (pixels) before rendering\n\nheight : resize the plot to this height (pixels) before rendering\n\nlowQuality : if true, anti-aliasing will be disabled for this render\n\nscale : scale the size of the output image by this fraction (without resizing the plot)\n\n renturn :the Bitmap that was created
GetBitmap(.(System_Boolean,System_Double) = Create a new Bitmap, render the plot onto it, and return it
GetImageBytes(.(System_Boolean,System_Double) = Render the plot and return the bytes for a PNG file.\n            This method is useful for rendering in stateless cloud environments that do not use a traditional filesystem.\n renturn :
RenderLegend(.(System_Boolean,System_Double) = Return a new Bitmap containing only the legend\n renturn :new bitmap containing the legend
SaveFig(.(System_String,System_Int32,System_Int32,System_Boolean,System_Double) = Save the plot as an image\nfilePath : file path for the images (existing files will be overwritten)\n\nwidth : resize the plot to this width (pixels) before rendering\n\nheight : resize the plot to this height (pixels) before rendering\n\nlowQuality : if true, anti-aliasing will be disabled for this render. Default false\n\nscale : scale the size of the output image by this fraction (without resizing the plot)\n\n renturn :Full path for the image that was saved
end intellisense**/



